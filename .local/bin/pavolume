#!/bin/sh

# finds the active sink for pulse audio and increments the volume. useful when you have multiple audio outputs and have a key bound to vol-up and down

inc='4'
maxvol='100'
active_sink=""
maxlimit=$((maxvol - inc))

reloadSink() {
    active_sink=$(pacmd list-sinks | awk '/* index:/{print $3}')
}

volUp() {
    getCurVol
    if [ "$curVol" -le "$maxvol" ] && [ "$curVol" -ge "$maxlimit" ]
    then
        pactl set-sink-volume "$active_sink" "$maxvol%"
    elif [ "$curVol" -lt "$maxlimit" ]
    then
        pactl set-sink-volume "$active_sink" "+$inc%"
    fi
}

volDown() {
    pactl set-sink-volume "$active_sink" "-$inc%"
}

getCurVol() {
    curVol=$(pacmd list-sinks | grep -A 15 "index: $active_sink$" | grep 'volume:' | grep -E -v 'base volume:' | awk -F : '{print $3}' | grep -o -P '.{0,3}%'| sed s/.$// | tr -d ' ')
}

volMute() {
    case "$1" in
        mute)
            pactl set-sink-mute "$active_sink" 1
            curVol=0
            ;;
        unmute)
            pactl set-sink-mute "$active_sink" 0
            getCurVol
            ;;
    esac
}

volMuteStatus() {
    curStatus=$(pacmd list-sinks | grep -A 15 "index: $active_sink$" | awk '/muted/{ print $2}')
}

# Prints output for bar
# Listens for events for fast update speed
listen() {
    firstrun=0

    pactl subscribe 2>/dev/null | {
        while true; do
            {
                # If this is the first time just continue
                # and print the current state
                # Otherwise wait for events
                # This is to prevent the module being empty until
                # an event occurs
                if [ $firstrun -eq 0 ]
                then
                    firstrun=1
                else
                    read -r event || break
                    if ! echo "$event" | grep -e "on card" -e "on sink"
                    then
                        # Avoid double events
                        continue
                    fi
                fi
            } >/dev/null
            output
        done
    }
}

output() {
    reloadSink
    getCurVol
    volMuteStatus
    if [ "${curStatus}" = 'yes' ]
    then
        echo " $curVol%"
    else
        echo " $curVol%"
    fi
}

reloadSink
case "$1" in
    -up)
        volUp
        ;;
    -down)
        volDown
        ;;
    -togmute)
        volMuteStatus
        if [ "$curStatus" = 'yes' ]
        then
            volMute unmute
        else
            volMute mute
        fi
        ;;
    --listen)
        listen
        ;;
    *)
        output
        ;;
esac
